version: "3.9"

services:
  traefik:
    image: traefik:v3.1
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:8085"
      - "--entrypoints.dashboard.address=:8086"
    ports:
      - "8085:8085" # Frontend port
      - "8086:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chromaspace
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  chat-service:
    build:
      context: .
      dockerfile: apps/chat-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3000

      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: chromaspace

      REDIS_HOST: redis
      REDIS_PORT: 6379

      KAFKA_CLIENT_ID: chat-service
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: chat-messages
      KAFKA_GROUP_ID: chat-service-group
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    expose:
      - "3000"
    deploy:
      replicas: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat.rule=PathPrefix(`/chat`)"
      - "traefik.http.services.chat.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.chat-strip-prefix.stripPrefix.prefixes=/chat"
      - "traefik.http.routers.chat.middlewares=chat-strip-prefix"
    depends_on:
      - postgres
      - redis
      - kafka

  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3000

      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: chromaspace

      REDIS_HOST: redis
      REDIS_PORT: 6379

      KAFKA_CLIENT_ID: chat-service
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: chat-messages
      KAFKA_GROUP_ID: chat-service-group
    expose:
      - "3000"
    deploy:
      replicas: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/user`)"
      - "traefik.http.services.user.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.user-strip-prefix.stripPrefix.prefixes=/user"
      - "traefik.http.routers.user.middlewares=user-strip-prefix"
    depends_on:
      - postgres
      - redis
      - kafka
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports:
      - "5173:5173"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - chat-service
      - user-service